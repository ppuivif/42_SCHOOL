limits.h(7POSIX)           POSIX Programmer's Manual          limits.h(7POSIX)

PPRROOLLOOGG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NNAAMMEE
       limits.h — implementation-defined constants

SSYYNNOOPPSSIISS
       #include <limits.h>

DDEESSCCRRIIPPTTIIOONN
       Some of the functionality described on this reference page extends  the
       ISO C  standard. Applications shall define the appropriate feature test
       macro (see the System Interfaces volume of POSIX.1‐2017,  _S_e_c_t_i_o_n  _2_._2,
       _T_h_e  _C_o_m_p_i_l_a_t_i_o_n _E_n_v_i_r_o_n_m_e_n_t) to enable the visibility of these symbols
       in this header.

       Many  of  the  symbols   listed   here   are   not   defined   by   the
       ISO/IEC 9899:1999  standard.  Such  symbols are not shown as CX shaded,
       except under the heading ``Numerical Limits''.

       The _<_l_i_m_i_t_s_._h_> header shall define macros and  symbolic  constants  for
       various  limits.   Different  categories of limits are described below,
       representing various limits on resources that  the  implementation  im‐
       poses  on  applications.   All macros and symbolic constants defined in
       this header shall be suitable for use in ##iiff preprocessing directives.

       Implementations may choose any appropriate value for each  limit,  pro‐
       vided  it  is  not  more restrictive than the Minimum Acceptable Values
       listed below. Symbolic constant names  beginning  with  _POSIX  may  be
       found in _<_u_n_i_s_t_d_._h_>.

       Applications  should  not  assume  any particular value for a limit. To
       achieve maximum portability, an application should not require more re‐
       source than the Minimum Acceptable Value quantity. However, an applica‐
       tion wishing to avail itself of the full amount of a resource available
       on  an  implementation may make use of the value given in _<_l_i_m_i_t_s_._h_> on
       that particular implementation, by using the macros and  symbolic  con‐
       stants  listed  below.  It  should  be noted, however, that many of the
       listed limits are not invariant, and at runtime, the value of the limit
       may differ from those given in this header, for the following reasons:

        *  The limit is pathname-dependent.

        *  The limit differs between the compile and runtime machines.

       For  these reasons, an application may use the _f_p_a_t_h_c_o_n_f(), _p_a_t_h_c_o_n_f(),
       and _s_y_s_c_o_n_f() functions to determine the actual value  of  a  limit  at
       runtime.

       The items in the list ending in _MIN give the most negative values that
       the mathematical types are guaranteed to be  capable  of  representing.
       Numbers  of  a more negative value may be supported on some implementa‐
       tions, as indicated by the _<_l_i_m_i_t_s_._h_> header on the implementation, but
       applications  requiring  such numbers are not guaranteed to be portable
       to all implementations. For positive constants ending in _MIN, this in‐
       dicates the minimum acceptable value.

   RRuunnttiimmee IInnvvaarriiaanntt VVaalluueess ((PPoossssiibbllyy IInnddeetteerrmmiinnaattee))
       A  definition  of  one  of the symbolic constants in the following list
       shall be omitted from _<_l_i_m_i_t_s_._h_> on specific implementations where  the
       corresponding value is equal to or greater than the stated minimum, but
       is unspecified.

       This indetermination might depend on the  amount  of  available  memory
       space  on  a specific instance of a specific implementation. The actual
       value supported by  a  specific  instance  shall  be  provided  by  the
       _s_y_s_c_o_n_f() function.

       {AIO_LISTIO_MAX}
             Maximum  number  of I/O operations in a single list I/O call sup‐
             ported by the implementation.
             Minimum Acceptable Value: {_POSIX_AIO_LISTIO_MAX}

       {AIO_MAX}
             Maximum number of outstanding asynchronous  I/O  operations  sup‐
             ported by the implementation.
             Minimum Acceptable Value: {_POSIX_AIO_MAX}

       {AIO_PRIO_DELTA_MAX}
             The  maximum amount by which a process can decrease its asynchro‐
             nous I/O priority level from its own scheduling priority.
             Minimum Acceptable Value: 0

       {ARG_MAX}
             Maximum length of argument to the _e_x_e_c functions including  envi‐
             ronment data.
             Minimum Acceptable Value: {_POSIX_ARG_MAX}

       {ATEXIT_MAX}
             Maximum number of functions that may be registered with _a_t_e_x_i_t().
             Minimum Acceptable Value: 32

       {CHILD_MAX}
             Maximum number of simultaneous processes per real user ID.
             Minimum Acceptable Value: {_POSIX_CHILD_MAX}

       {DELAYTIMER_MAX}
             Maximum number of timer expiration overruns.
             Minimum Acceptable Value: {_POSIX_DELAYTIMER_MAX}

       {HOST_NAME_MAX}
             Maximum  length  of  a  host  name (not including the terminating
             null) as returned from the _g_e_t_h_o_s_t_n_a_m_e() function.
             Minimum Acceptable Value: {_POSIX_HOST_NAME_MAX}

       {IOV_MAX}
             Maximum number of iioovveecc structures that one process has available
             for use with _r_e_a_d_v() or _w_r_i_t_e_v().
             Minimum Acceptable Value: {_XOPEN_IOV_MAX}

       {LOGIN_NAME_MAX}
             Maximum length of a login name.
             Minimum Acceptable Value: {_POSIX_LOGIN_NAME_MAX}

       {MQ_OPEN_MAX}
             The  maximum  number  of open message queue descriptors a process
             may hold.
             Minimum Acceptable Value: {_POSIX_MQ_OPEN_MAX}

       {MQ_PRIO_MAX}
             The maximum number of message priorities supported by the  imple‐
             mentation.
             Minimum Acceptable Value: {_POSIX_MQ_PRIO_MAX}

       {OPEN_MAX}
             A  value  one  greater than the maximum value that the system may
             assign to a newly-created file descriptor.
             Minimum Acceptable Value: {_POSIX_OPEN_MAX}

       {PAGESIZE}
             Size in bytes of a page.
             Minimum Acceptable Value: 1

       {PAGE_SIZE}
             Equivalent to {PAGESIZE}.  If either {PAGESIZE} or {PAGE_SIZE} is
             defined, the other is defined with the same value.

       {PTHREAD_DESTRUCTOR_ITERATIONS}
             Maximum number of attempts made to destroy a thread's thread-spe‐
             cific data values on thread exit.
             Minimum Acceptable Value: {_POSIX_THREAD_DESTRUCTOR_ITERATIONS}

       {PTHREAD_KEYS_MAX}
             Maximum number of data keys that can be created by a process.
             Minimum Acceptable Value: {_POSIX_THREAD_KEYS_MAX}

       {PTHREAD_STACK_MIN}
             Minimum size in bytes of thread stack storage.
             Minimum Acceptable Value: 0

       {PTHREAD_THREADS_MAX}
             Maximum number of threads that can be created per process.
             Minimum Acceptable Value: {_POSIX_THREAD_THREADS_MAX}

       {RTSIG_MAX}
             Maximum number of realtime signals reserved for  application  use
             in this implementation.
             Minimum Acceptable Value: {_POSIX_RTSIG_MAX}

       {SEM_NSEMS_MAX}
             Maximum number of semaphores that a process may have.
             Minimum Acceptable Value: {_POSIX_SEM_NSEMS_MAX}

       {SEM_VALUE_MAX}
             The maximum value a semaphore may have.
             Minimum Acceptable Value: {_POSIX_SEM_VALUE_MAX}

       {SIGQUEUE_MAX}
             Maximum number of queued signals that a process may send and have
             pending at the receiver(s) at any time.
             Minimum Acceptable Value: {_POSIX_SIGQUEUE_MAX}

       {SS_REPL_MAX}
             The maximum number of replenishment operations that may be simul‐
             taneously pending for a particular sporadic server scheduler.
             Minimum Acceptable Value: {_POSIX_SS_REPL_MAX}

       {STREAM_MAX}
             Maximum  number  of streams that one process can have open at one
             time.  If defined, it has the  same  value  as  {FOPEN_MAX}  (see
             _<_s_t_d_i_o_._h_>).
             Minimum Acceptable Value: {_POSIX_STREAM_MAX}

       {SYMLOOP_MAX}
             Maximum  number  of symbolic links that can be reliably traversed
             in the resolution of a pathname in the absence of a loop.
             Minimum Acceptable Value: {_POSIX_SYMLOOP_MAX}

       {TIMER_MAX}
             Maximum number of timers per process supported by the implementa‐
             tion.
             Minimum Acceptable Value: {_POSIX_TIMER_MAX}

       {TRACE_EVENT_NAME_MAX}
             Maximum  length of the trace event name (not including the termi‐
             nating null).
             Minimum Acceptable Value: {_POSIX_TRACE_EVENT_NAME_MAX}

       {TRACE_NAME_MAX}
             Maximum length of the trace generation version string or  of  the
             trace stream name (not including the terminating null).
             Minimum Acceptable Value: {_POSIX_TRACE_NAME_MAX}

       {TRACE_SYS_MAX}
             Maximum  number of trace streams that may simultaneously exist in
             the system.
             Minimum Acceptable Value: {_POSIX_TRACE_SYS_MAX}

       {TRACE_USER_EVENT_MAX}
             Maximum number of user trace event type identifiers that may  si‐
             multaneously  exist in a traced process, including the predefined
             user trace event POSIX_TRACE_UNNAMED_USER_EVENT.
             Minimum Acceptable Value: {_POSIX_TRACE_USER_EVENT_MAX}

       {TTY_NAME_MAX}
             Maximum length of terminal device name.
             Minimum Acceptable Value: {_POSIX_TTY_NAME_MAX}

       {TZNAME_MAX}
             Maximum number of bytes supported for the name of a timezone (not
             of the _T_Z variable).
             Minimum Acceptable Value: {_POSIX_TZNAME_MAX}

       NNoottee::     The length given by {TZNAME_MAX} does not include the quoting
                 characters mentioned in _S_e_c_t_i_o_n _8_._3, _O_t_h_e_r _E_n_v_i_r_o_n_m_e_n_t  _V_a_r_i_‐
                 _a_b_l_e_s.

   PPaatthhnnaammee VVaarriiaabbllee VVaalluueess
       The values in the following list may be constants within an implementa‐
       tion or may vary from one pathname to another. For example,  file  sys‐
       tems or directories may have different characteristics.

       A  definition  of  one  of the symbolic constants in the following list
       shall be omitted from the _<_l_i_m_i_t_s_._h_> header on specific implementations
       where  the  corresponding  value is equal to or greater than the stated
       minimum, but where the value can vary depending on the file to which it
       is applied. The actual value supported for a specific pathname shall be
       provided by the _p_a_t_h_c_o_n_f() function.

       {FILESIZEBITS}
             Minimum number of bits needed to represent, as a  signed  integer
             value,  the  maximum size of a regular file allowed in the speci‐
             fied directory.
             Minimum Acceptable Value: 32

       {LINK_MAX}
             Maximum number of links to a single file.
             Minimum Acceptable Value: {_POSIX_LINK_MAX}

       {MAX_CANON}
             Maximum number of bytes in a terminal canonical input line.
             Minimum Acceptable Value: {_POSIX_MAX_CANON}

       {MAX_INPUT}
             Minimum number of bytes for which space is available in a  termi‐
             nal  input  queue;  therefore, the maximum number of bytes a con‐
             forming application may require to be typed as input before read‐
             ing them.
             Minimum Acceptable Value: {_POSIX_MAX_INPUT}

       {NAME_MAX}
             Maximum  number  of bytes in a filename (not including the termi‐
             nating null of a filename string).
             Minimum Acceptable Value: {_POSIX_NAME_MAX}
             Minimum Acceptable Value: {_XOPEN_NAME_MAX}

       {PATH_MAX}
             Maximum number of bytes the implementation will store as a  path‐
             name in a user-supplied buffer of unspecified size, including the
             terminating null character.  Minimum  number  the  implementation
             will accept as the maximum number of bytes in a pathname.
             Minimum Acceptable Value: {_POSIX_PATH_MAX}
             Minimum Acceptable Value: {_XOPEN_PATH_MAX}

       {PIPE_BUF}
             Maximum  number  of  bytes  that  is guaranteed to be atomic when
             writing to a pipe.
             Minimum Acceptable Value: {_POSIX_PIPE_BUF}

       {POSIX_ALLOC_SIZE_MIN}
             Minimum number of bytes of storage  actually  allocated  for  any
             portion of a file.
             Minimum Acceptable Value: Not specified.

       {POSIX_REC_INCR_XFER_SIZE}
             Recommended   increment  for  file  transfer  sizes  between  the
             {POSIX_REC_MIN_XFER_SIZE} and {POSIX_REC_MAX_XFER_SIZE} values.
             Minimum Acceptable Value: Not specified.

       {POSIX_REC_MAX_XFER_SIZE}
             Maximum recommended file transfer size.
             Minimum Acceptable Value: Not specified.

       {POSIX_REC_MIN_XFER_SIZE}
             Minimum recommended file transfer size.
             Minimum Acceptable Value: Not specified.

       {POSIX_REC_XFER_ALIGN}
             Recommended file transfer buffer alignment.
             Minimum Acceptable Value: Not specified.

       {SYMLINK_MAX}
             Maximum number of bytes in a symbolic link.
             Minimum Acceptable Value: {_POSIX_SYMLINK_MAX}

   RRuunnttiimmee IInnccrreeaassaabbllee VVaalluueess
       The magnitude limitations in the following list shall be fixed by  spe‐
       cific  implementations.  An application should assume that the value of
       the symbolic constant defined by _<_l_i_m_i_t_s_._h_> in a  specific  implementa‐
       tion is the minimum that pertains whenever the application is run under
       that implementation. A specific instance of a  specific  implementation
       may increase the value relative to that supplied by _<_l_i_m_i_t_s_._h_> for that
       implementation. The actual value supported by a specific instance shall
       be provided by the _s_y_s_c_o_n_f() function.

       {BC_BASE_MAX}
             Maximum _o_b_a_s_e values allowed by the _b_c utility.
             Minimum Acceptable Value: {_POSIX2_BC_BASE_MAX}

       {BC_DIM_MAX}
             Maximum  number of elements permitted in an array by the _b_c util‐
             ity.
             Minimum Acceptable Value: {_POSIX2_BC_DIM_MAX}

       {BC_SCALE_MAX}
             Maximum _s_c_a_l_e value allowed by the _b_c utility.
             Minimum Acceptable Value: {_POSIX2_BC_SCALE_MAX}

       {BC_STRING_MAX}
             Maximum length of a string constant accepted by the _b_c utility.
             Minimum Acceptable Value: {_POSIX2_BC_STRING_MAX}

       {CHARCLASS_NAME_MAX}
             Maximum number of bytes in a character class name.
             Minimum Acceptable Value: {_POSIX2_CHARCLASS_NAME_MAX}

       {COLL_WEIGHTS_MAX}
             Maximum number of weights that can be assigned to an entry of the
             _L_C___C_O_L_L_A_T_E oorrddeerr keyword in the locale definition file; see _C_h_a_p_‐
             _t_e_r _7, _L_o_c_a_l_e.
             Minimum Acceptable Value: {_POSIX2_COLL_WEIGHTS_MAX}

       {EXPR_NEST_MAX}
             Maximum number of expressions that can be nested within parenthe‐
             ses by the _e_x_p_r utility.
             Minimum Acceptable Value: {_POSIX2_EXPR_NEST_MAX}

       {LINE_MAX}
             Unless  otherwise noted, the maximum length, in bytes, of a util‐
             ity's input line (either standard input or  another  file),  when
             the utility is described as processing text files. The length in‐
             cludes room for the trailing <newline>.
             Minimum Acceptable Value: {_POSIX2_LINE_MAX}

       {NGROUPS_MAX}
             Maximum  number  of  simultaneous  supplementary  group  IDs  per
             process.
             Minimum Acceptable Value: {_POSIX_NGROUPS_MAX}

       {RE_DUP_MAX}
             Maximum  number  of repeated occurrences of a BRE or ERE interval
             expression; see _S_e_c_t_i_o_n _9_._3_._6, _B_R_E_s _M_a_t_c_h_i_n_g _M_u_l_t_i_p_l_e  _C_h_a_r_a_c_t_e_r_s
             and _S_e_c_t_i_o_n _9_._4_._6, _E_R_E_s _M_a_t_c_h_i_n_g _M_u_l_t_i_p_l_e _C_h_a_r_a_c_t_e_r_s.
             Minimum Acceptable Value: {_POSIX_RE_DUP_MAX}

   MMaaxxiimmuumm VVaalluueess
       The  _<_l_i_m_i_t_s_._h_>  header  shall  define the following symbolic constants
       with the values shown. These are the most restrictive values  for  cer‐
       tain  features  on an implementation. A conforming implementation shall
       provide values no larger than these values.  A  conforming  application
       must not require a smaller value for correct operation.

       {_POSIX_CLOCKRES_MIN}
             The resolution of the CLOCK_REALTIME clock, in nanoseconds.
             Value: 20 000 000

             If the Monotonic Clock option is supported, the resolution of the
             CLOCK_MONOTONIC  clock,  in  nanoseconds,   is   represented   by
             {_POSIX_CLOCKRES_MIN}.

   MMiinniimmuumm VVaalluueess
       The  _<_l_i_m_i_t_s_._h_>  header  shall  define the following symbolic constants
       with the values shown. These are the most restrictive values  for  cer‐
       tain  features  on  an  implementation  conforming  to  this  volume of
       POSIX.1‐2017. Related symbolic constants are defined elsewhere in  this
       volume  of  POSIX.1‐2017  which  reflect  the actual implementation and
       which need not be as restrictive. For each of these limits, a  conform‐
       ing  implementation  shall provide a value at least this large or shall
       have no limit. A strictly conforming application  must  not  require  a
       larger value for correct operation.

       {_POSIX_AIO_LISTIO_MAX}
             The  number of I/O operations that can be specified in a list I/O
             call.
             Value: 2

       {_POSIX_AIO_MAX}
             The number of outstanding asynchronous I/O operations.
             Value: 1

       {_POSIX_ARG_MAX}
             Maximum length of argument to the _e_x_e_c functions including  envi‐
             ronment data.
             Value: 4 096

       {_POSIX_CHILD_MAX}
             Maximum number of simultaneous processes per real user ID.
             Value: 25

       {_POSIX_DELAYTIMER_MAX}
             The number of timer expiration overruns.
             Value: 32

       {_POSIX_HOST_NAME_MAX}
             Maximum  length  of  a  host  name (not including the terminating
             null) as returned from the _g_e_t_h_o_s_t_n_a_m_e() function.
             Value: 255

       {_POSIX_LINK_MAX}
             Maximum number of links to a single file.
             Value: 8

       {_POSIX_LOGIN_NAME_MAX}
             The size of the storage required for a login name, in bytes  (in‐
             cluding the terminating null).
             Value: 9

       {_POSIX_MAX_CANON}
             Maximum number of bytes in a terminal canonical input queue.
             Value: 255

       {_POSIX_MAX_INPUT}
             Maximum number of bytes allowed in a terminal input queue.
             Value: 255

       {_POSIX_MQ_OPEN_MAX}
             The  number  of  message  queues  that  can  be open for a single
             process.
             Value: 8

       {_POSIX_MQ_PRIO_MAX}
             The maximum number of message priorities supported by the  imple‐
             mentation.
             Value: 32

       {_POSIX_NAME_MAX}
             Maximum  number  of bytes in a filename (not including the termi‐
             nating null of a filename string).
             Value: 14

       {_POSIX_NGROUPS_MAX}
             Maximum  number  of  simultaneous  supplementary  group  IDs  per
             process.
             Value: 8

       {_POSIX_OPEN_MAX}
             A  value  one  greater than the maximum value that the system may
             assign to a newly-created file descriptor.
             Value: 20

       {_POSIX_PATH_MAX}
             Minimum number the implementation will accept as the maximum num‐
             ber of bytes in a pathname.
             Value: 256

       {_POSIX_PIPE_BUF}
             Maximum  number  of  bytes  that  is guaranteed to be atomic when
             writing to a pipe.
             Value: 512

       {_POSIX_RE_DUP_MAX}
             Maximum number of repeated occurrences of a BRE or  ERE  interval
             expression;  see _S_e_c_t_i_o_n _9_._3_._6, _B_R_E_s _M_a_t_c_h_i_n_g _M_u_l_t_i_p_l_e _C_h_a_r_a_c_t_e_r_s
             and _S_e_c_t_i_o_n _9_._4_._6, _E_R_E_s _M_a_t_c_h_i_n_g _M_u_l_t_i_p_l_e _C_h_a_r_a_c_t_e_r_s.
             Value: 255

       {_POSIX_RTSIG_MAX}
             The number of realtime signal numbers  reserved  for  application
             use.
             Value: 8

       {_POSIX_SEM_NSEMS_MAX}
             The number of semaphores that a process may have.
             Value: 256

       {_POSIX_SEM_VALUE_MAX}
             The maximum value a semaphore may have.
             Value: 32 767

       {_POSIX_SIGQUEUE_MAX}
             The  number  of  queued  signals that a process may send and have
             pending at the receiver(s) at any time.
             Value: 32

       {_POSIX_SSIZE_MAX}
             The value that can be stored in an object of type ssssiizzee__tt.
             Value: 32 767

       {_POSIX_SS_REPL_MAX}
             The number of replenishment operations that may be simultaneously
             pending for a particular sporadic server scheduler.
             Value: 4

       {_POSIX_STREAM_MAX}
             The number of streams that one process can have open at one time.
             Value: 8

       {_POSIX_SYMLINK_MAX}
             The number of bytes in a symbolic link.
             Value: 255

       {_POSIX_SYMLOOP_MAX}
             The number of symbolic links that can be traversed in the resolu‐
             tion of a pathname in the absence of a loop.
             Value: 8

       {_POSIX_THREAD_DESTRUCTOR_ITERATIONS}
             The number of attempts made to destroy a thread's thread-specific
             data values on thread exit.
             Value: 4

       {_POSIX_THREAD_KEYS_MAX}
             The number of data keys per process.
             Value: 128

       {_POSIX_THREAD_THREADS_MAX}
             The number of threads per process.
             Value: 64

       {_POSIX_TIMER_MAX}
             The per-process number of timers.
             Value: 32

       {_POSIX_TRACE_EVENT_NAME_MAX}
             The length in bytes of a trace event name (not including the ter‐
             minating null).
             Value: 30

       {_POSIX_TRACE_NAME_MAX}
             The length in bytes of a trace generation  version  string  or  a
             trace stream name (not including the terminating null).
             Value: 8

       {_POSIX_TRACE_SYS_MAX}
             The  number of trace streams that may simultaneously exist in the
             system.
             Value: 8

       {_POSIX_TRACE_USER_EVENT_MAX}
             The number of user trace event type identifiers that may simulta‐
             neously  exist in a traced process, including the predefined user
             trace event POSIX_TRACE_UNNAMED_USER_EVENT.
             Value: 32

       {_POSIX_TTY_NAME_MAX}
             The size of the storage required for a terminal device  name,  in
             bytes (including the terminating null).
             Value: 9

       {_POSIX_TZNAME_MAX}
             Maximum number of bytes supported for the name of a timezone (not
             of the _T_Z variable).
             Value: 6

             NNoottee::     The length given by {_POSIX_TZNAME_MAX}  does  not  in‐
                       clude  the quoting characters mentioned in _S_e_c_t_i_o_n _8_._3,
                       _O_t_h_e_r _E_n_v_i_r_o_n_m_e_n_t _V_a_r_i_a_b_l_e_s.

       {_POSIX2_BC_BASE_MAX}
             Maximum _o_b_a_s_e values allowed by the _b_c utility.
             Value: 99

       {_POSIX2_BC_DIM_MAX}
             Maximum number of elements permitted in an array by the _b_c  util‐
             ity.
             Value: 2 048

       {_POSIX2_BC_SCALE_MAX}
             Maximum _s_c_a_l_e value allowed by the _b_c utility.
             Value: 99

       {_POSIX2_BC_STRING_MAX}
             Maximum length of a string constant accepted by the _b_c utility.
             Value: 1 000

       {_POSIX2_CHARCLASS_NAME_MAX}
             Maximum number of bytes in a character class name.
             Value: 14

       {_POSIX2_COLL_WEIGHTS_MAX}
             Maximum number of weights that can be assigned to an entry of the
             _L_C___C_O_L_L_A_T_E oorrddeerr keyword in the locale definition file; see _C_h_a_p_‐
             _t_e_r _7, _L_o_c_a_l_e.
             Value: 2

       {_POSIX2_EXPR_NEST_MAX}
             Maximum number of expressions that can be nested within parenthe‐
             ses by the _e_x_p_r utility.
             Value: 32

       {_POSIX2_LINE_MAX}
             Unless otherwise noted, the maximum length, in bytes, of a  util‐
             ity's  input  line  (either standard input or another file), when
             the utility is described as processing text files. The length in‐
             cludes room for the trailing <newline>.
             Value: 2 048

       {_POSIX2_RE_DUP_MAX}
             Maximum  number  of repeated occurrences of a BRE or ERE interval
             expression; see _S_e_c_t_i_o_n _9_._3_._6, _B_R_E_s _M_a_t_c_h_i_n_g _M_u_l_t_i_p_l_e  _C_h_a_r_a_c_t_e_r_s
             and _S_e_c_t_i_o_n _9_._4_._6, _E_R_E_s _M_a_t_c_h_i_n_g _M_u_l_t_i_p_l_e _C_h_a_r_a_c_t_e_r_s.
             Value: 255

       {_XOPEN_IOV_MAX}
             Maximum number of iioovveecc structures that one process has available
             for use with _r_e_a_d_v() or _w_r_i_t_e_v().
             Value: 16

       {_XOPEN_NAME_MAX}
             Maximum number of bytes in a filename (not including  the  termi‐
             nating null of a filename string).
             Value: 255

       {_XOPEN_PATH_MAX}
             Minimum number the implementation will accept as the maximum num‐
             ber of bytes in a pathname.
             Value: 1024

   NNuummeerriiccaall LLiimmiittss
       The _<_l_i_m_i_t_s_._h_> header shall define the following macros and, except for
       {CHAR_BIT}, {LONG_BIT}, {MB_LEN_MAX}, and {WORD_BIT}, they shall be re‐
       placed by expressions that have the same type as  would  an  expression
       that  is an object of the corresponding type converted according to the
       integer promotions.

       If the value of an object of type cchhaarr is treated as a  signed  integer
       when used in an expression, the value of {CHAR_MIN} is the same as that
       of {SCHAR_MIN} and the value of {CHAR_MAX}  is  the  same  as  that  of
       {SCHAR_MAX}.   Otherwise, the value of {CHAR_MIN} is 0 and the value of
       {CHAR_MAX} is the same as that of {UCHAR_MAX}.

       {CHAR_BIT}
             Number of bits in a type cchhaarr.
             Value: 8

       {CHAR_MAX}
             Maximum value for an object of type cchhaarr.
             Value: {UCHAR_MAX} or {SCHAR_MAX}

       {CHAR_MIN}
             Minimum value for an object of type cchhaarr.
             Value: {SCHAR_MIN} or 0

       {INT_MAX}
             Maximum value for an object of type iinntt.
             Minimum Acceptable Value: 2 147 483 647

       {INT_MIN}
             Minimum value for an object of type iinntt.
             Maximum Acceptable Value: -2 147 483 647

       {LLONG_MAX}
             Maximum value for an object of type lloonngg lloonngg.
             Minimum Acceptable Value: +9223372036854775807

       {LLONG_MIN}
             Minimum value for an object of type lloonngg lloonngg.
             Maximum Acceptable Value: -9223372036854775807

       {LONG_BIT}
             Number of bits in an object of type lloonngg.
             Minimum Acceptable Value: 32

       {LONG_MAX}
             Maximum value for an object of type lloonngg.
             Minimum Acceptable Value: +2 147 483 647

       {LONG_MIN}
             Minimum value for an object of type lloonngg.
             Maximum Acceptable Value: -2 147 483 647

       {MB_LEN_MAX}
             Maximum number of bytes in a character, for any supported locale.
             Minimum Acceptable Value: 1

       {SCHAR_MAX}
             Maximum value for an object of type ssiiggnneedd cchhaarr.
             Value: +127

       {SCHAR_MIN}
             Minimum value for an object of type ssiiggnneedd cchhaarr.
             Value: -128

       {SHRT_MAX}
             Maximum value for an object of type sshhoorrtt.
             Minimum Acceptable Value: +32 767

       {SHRT_MIN}
             Minimum value for an object of type sshhoorrtt.
             Maximum Acceptable Value: -32 767

       {SSIZE_MAX}
             Maximum value for an object of type ssssiizzee__tt.
             Minimum Acceptable Value: {_POSIX_SSIZE_MAX}

       {UCHAR_MAX}
             Maximum value for an object of type uunnssiiggnneedd cchhaarr.
             Value: 255

       {UINT_MAX}
             Maximum value for an object of type uunnssiiggnneedd.
             Minimum Acceptable Value: 4 294 967 295

       {ULLONG_MAX}
             Maximum value for an object of type uunnssiiggnneedd lloonngg lloonngg.
             Minimum Acceptable Value: 18446744073709551615

       {ULONG_MAX}
             Maximum value for an object of type uunnssiiggnneedd lloonngg.
             Minimum Acceptable Value: 4 294 967 295

       {USHRT_MAX}
             Maximum value for an object of type uunnssiiggnneedd sshhoorrtt.
             Minimum Acceptable Value: 65 535

       {WORD_BIT}
             Number of bits in an object of type iinntt.
             Minimum Acceptable Value: 32

   OOtthheerr IInnvvaarriiaanntt VVaalluueess
       The _<_l_i_m_i_t_s_._h_> header shall define the following symbolic constants:

       {NL_ARGMAX}
             Maximum value of _n in conversion specifications using  the  "%_n$"
             sequence  in  calls to the _p_r_i_n_t_f() and _s_c_a_n_f() families of func‐
             tions.
             Minimum Acceptable Value: 9

       {NL_LANGMAX}
             Maximum number of bytes in a _L_A_N_G name.
             Minimum Acceptable Value: 14

       {NL_MSGMAX}
             Maximum message number.
             Minimum Acceptable Value: 32 767

       {NL_SETMAX}
             Maximum set number.
             Minimum Acceptable Value: 255

       {NL_TEXTMAX}
             Maximum number of bytes in a message string.
             Minimum Acceptable Value: {_POSIX2_LINE_MAX}

       {NZERO}
             Default process priority.
             Minimum Acceptable Value: 20

       _T_h_e _f_o_l_l_o_w_i_n_g _s_e_c_t_i_o_n_s _a_r_e _i_n_f_o_r_m_a_t_i_v_e_.

AAPPPPLLIICCAATTIIOONN UUSSAAGGEE
       None.

RRAATTIIOONNAALLEE
       A request was made to reduce the value of  {_POSIX_LINK_MAX}  from  the
       value  of  8  specified  for  it in the POSIX.1‐1990 standard to 2. The
       standard developers decided to deny this request for several reasons:

        *  They wanted to avoid making any changes to the standard that  could
           break  conforming applications, and the requested change could have
           that effect.

        *  The use of multiple hard links to a file cannot always be  replaced
           with use of symbolic links. Symbolic links are semantically differ‐
           ent from hard links in that they associate a pathname with  another
           pathname  rather than a pathname with a file. This has implications
           for access control, file permanence, and transparency.

        *  The original standard developers had considered the issue of allow‐
           ing for implementations that did not in general support hard links,
           and decided that this would reduce consensus on the standard.

       Systems that support historical versions of the development  option  of
       the  ISO POSIX‐2  standard  retain  the name {_POSIX2_RE_DUP_MAX} as an
       alias for {_POSIX_RE_DUP_MAX}.

       {PATH_MAX}
             IEEE PASC Interpretation 1003.1 #15 addressed  the  inconsistency
             in  the standard with the definition of pathname and the descrip‐
             tion of {PATH_MAX}, allowing application developers  to  allocate
             either  {PATH_MAX}  or  {PATH_MAX}+1 bytes. The inconsistency has
             been removed by correction to the {PATH_MAX}  definition  to  in‐
             clude  the  null  character.  With this change, applications that
             previously allocated {PATH_MAX} bytes will continue to succeed.

       {SYMLINK_MAX}
             This symbol refers to space for data that is stored in  the  file
             system,  as  opposed  to {PATH_MAX} which is the length of a name
             that can be passed to a function. In  some  existing  implementa‐
             tions,  the  pathnames pointed to by symbolic links are stored in
             the _i_n_o_d_es of the links, so it is  important  that  {SYMLINK_MAX}
             not be constrained to be as large as {PATH_MAX}.

FFUUTTUURREE DDIIRREECCTTIIOONNSS
       None.

SSEEEE AALLSSOO
       _C_h_a_p_t_e_r _7, _L_o_c_a_l_e, <<ssttddiioo..hh>>, <<uunniissttdd..hh>>

       The System Interfaces volume of POSIX.1‐2017, _S_e_c_t_i_o_n _2_._2, _T_h_e _C_o_m_p_i_l_a_‐
       _t_i_o_n _E_n_v_i_r_o_n_m_e_n_t, _f_p_a_t_h_c_o_n_f(), _s_y_s_c_o_n_f()

CCOOPPYYRRIIGGHHTT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                     limits.h(7POSIX)

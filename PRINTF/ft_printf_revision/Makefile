# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: ppuivif <marvin@42.fr>                     +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/12/13 11:25:27 by ppuivif           #+#    #+#              #
#    Updated: 2023/12/13 14:35:37 by ppuivif          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

CC=cc
//la ligne declare une 'variable' CC
//la ligne contient le nom du compilateur a utiliser

CFLAGS=-Wall -Wextra -Werror -g
//la ligne declare une 'variable' CFLAGS
//la ligne contient les options de compilation

NAME=libftprintf.a
//la ligne declare une 'variable' NAME
//la ligne permet de specifier le nom de l'executable (.a ou archive) a generer en compilant le code source du projet

HEADER=libftprintf.h
//la ligne declare une 'variable' HEADER
//la ligne permet de specifier les fichiers d'en-tete (.h ou header) a inclure dans la compilation

SOURCES=ft_printf.c added_functions.c
//la ligne declare une variable SOURCES contenant la liste des fichiers source du projet

OBJECTS=$(SOURCES:.c=.o)
//la ligne declare une variable OBJECTS
//la ligne est une maniere concise de generer la liste des fichiers objets (temporaires) obtenus a partir des fichiers sources
//un fichier file.o est obtenu a partir du fichier file.c

all: $(NAME)
//cette ligne est une regle
//all est une cible (target) par defaut permettant d'executer la/les premieres instructions

$(NAME): $(OBJECTS)
//cette ligne est une regle
//$(NAME) est la syntaxe pour referencer la variable NAME prealablement declaree
//$(NAME) est la cible a construire, pour aboutir a la creation de l'executable libftprintf.a
//la regle appelle la variable OBJECTS qui contient la liste des fichiers .o obtenus a partir des fichiers .c
//la regle verifie que les fichiers objets sont plus recents que les fichiers sources correspondant
//si necessaire le Makefile reconstruit les fichiers objets

	ar -rcs $(NAME) $(OBJECTS)
//il s'agit d'une commande associee a la regle precedente
//cette commande permet donc de construire l'executable (compiler)
//ar est l'utilitaire d'archivage sous Linux
//-rcs sont les options associees
//r pour 'replace' les fichiers existants
//c pour 'create' l'archive
//s pour 'sort' (trier soit creer un index)

%.o : %.c $(HEADER)
//cette ligne est une regle
//la regle indique comment generer un fichier objet (%.o) a partir d'un fichier source correspondant (%.c)
//la variable HEADER represente la liste des fichiers d'en-tete necessaires pour la compilation
//%.o est la cible de la regle (% pour designer tous les fichiers .o)
//%.c specifie le fichier source correspondant a la cible (% pour designer tous les fichiers .c)
//$(HEADER) est specifie car la regle depend egalement des fichiers d'en-tete

	 $(CC) $(CFLAGS) -c $< -o $@
//


%.o : %.c $(HEADER) : C'est une règle implicite qui indique comment générer un fichier objet (%.o) à partir d'un fichier source correspondant (%.c). La variable HEADER représente la liste des fichiers d'en-tête nécessaires pour la compilation. La règle est déclenchée chaque fois qu'un fichier objet est nécessaire et n'est pas trouvé ou est plus ancien que le fichier source correspondant.

%.o : Le côté gauche du deux-points (:) représente la cible de la règle, qui est un fichier objet générique. Le caractère % est un joker qui correspond à n'importe quelle chaîne de caractères (par exemple, main.o, file1.o, etc.).

%.c : Cela spécifie le fichier source correspondant à la cible. Le joker % ici correspond à la même chaîne de caractères que celui utilisé dans la cible, indiquant que le fichier source a la même base que le fichier objet.

$(HEADER) : Cela indique que la règle dépend également des fichiers d'en-tête définis dans la variable HEADER. Si un en-tête est modifié, la règle sera reconstruite.

$(CC) $(CFLAGS) -c $< -o $@ : Cette ligne est la commande pour générer le fichier objet à partir du fichier source. Voici ce que signifient les parties de cette commande :

$(CC) : Il s'agit de la variable qui contient le nom du compilateur C à utiliser (par exemple, gcc).

$(CFLAGS) : Il s'agit de la variable qui contient les options de compilation, telles que les flags (drapeaux) de compilation et les options d'optimisation.

-c : Cet argument indique au compilateur de ne pas effectuer l'étape de liaison, produisant ainsi un fichier objet plutôt qu'un exécutable.

$< : C'est une variable automatique qui représente le premier préréquis de la règle, c'est-à-dire le fichier source (%.c).

-o $@ : Cet argument indique où enregistrer le fichier objet généré. $@ est une variable automatique qui représente la cible de la règle, c'est-à-dire le fichier objet (%.o).

En résumé, cette règle générique indique comment produire un fichier objet à partir d'un fichier source, en utilisant les variables CC (compilateur), CFLAGS (options de compilation) et en spécifiant les dépendances des fichiers d'en-tête.


//
rm - remove files or directories
rm removes each specified file. By default, it does not remove directories.
options
	-r, -R, --recursive remove directories and their contents recursively.
	-f, --force : ignore nonexistent files and arguments, never prompt.
	
//
.PHONY : clean
By default, Makefile targets are "file targets" - they are used to build files from other files. Make assumes its target is a file, and this makes writing Makefiles relatively easy.
However, sometimes you want your Makefile to run commands that do not represent physical files in the file system. Good examples for this are the common targets "clean" and "all". Chances are this isn't the case, but you may potentially have a file named clean in your main directory. In such a case Make will be confused because by default the clean target would be associated with this file and Make will only run it when the file doesn't appear to be up-to-date with regards to its dependencies.


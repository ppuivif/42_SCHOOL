int	ft_strncmp(const char *s1, const char *s2, size_t n)

->       The  atoi() function converts the initial portion of the string pointed to by nptr to int.  The
       behavior is the same as

           strtol(nptr, NULL, 10);

       except that atoi() does not detect errors.
      
->The converted value or 0 on error.

->!!!.

int	ft_atoi(const char *nptr)
{
	int	i;
	int	j;
	int	nbr;

	i = 0;
	j = 1;
	nbr = 0;
	while (nptr[i] != '\0' && (nptr[i] == 32 || (nptr[i] > 8 && nptr[i] < 14)))
		i++;
// 43 is ASCII value for '+' and 45 is ASCII value for '-' 
	if (nptr[i] != '\0' && (nptr[i] == 45 || nptr[i] == 43))
	{
		if (nptr[i] == 45)
			j = j * -1;
		i++;
	}
	while (nptr[i] != '\0' && nptr[i] > 47 && nptr[i] < 58)
	{
// 48 is ASCII value for '0' and 57 is ASCII value for '9'
		nbr = (nbr * 10) + (nptr[i] - 48);
		i++;
	}
	return (nbr * j);
}

#include <stdlib.h>
#include <stdio.h>

int	main(int argc, char **argv)
{
	if (argc == 2)
		printf("real_function :\t%d\n", atoi(argv[1]));
	if (argc == 3)
		printf("ft_function :\t%d\n", ft_atoi(argv[1]));
}

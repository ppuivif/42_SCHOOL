int	ft_memcmp(const void *s1, const void *s2, size_t n)

->The  memcmp()  function  compares  the first n bytes (each interpreted as unsigned char) of the
       memory areas s1 and s2.
->The memcmp() function returns an integer less than, equal to, or greater than zero if the first
       n bytes of s1 is found, respectively, to be less than, to match, or be greater than the first n
       bytes of s2.

       For a nonzero return value, the sign is determined by the sign of the  difference  between  the
       first pair of bytes (interpreted as unsigned char) that differ in s1 and s2.

       If n is zero, the return value is zero.

->No protection.

#include <stddef.h>

int	ft_memcmp(const void *s1, const void *s2, size_t n)
{
	size_t			i;
	unsigned char	*str1;
	unsigned char	*str2;

	i = 0;
	str1 = (unsigned char *) s1;
	str2 = (unsigned char *) s2;
	while (i < n)
	{
		if (str1[i] == str2[i])
			i++;
		else
			return (str1[i] - str2[i]);
	}
	return (0);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int	main(int argc, char **argv)
{
	if (argc == 4)
		printf("real_function return :\t%d\n",
			memcmp(argv[1], argv[2], atoi(argv[3])));
	if (argc == 5)
		printf("ft_function return :\t%d\n",
			ft_memcmp(argv[1], argv[2], atoi(argv[3])));
	return (0);
}

int	ft_strncmp(const char *s1, const char *s2, size_t n)

->       The  strcmp()  function compares the two strings s1 and s2.  The locale is not taken into account (for a
       locale-aware comparison, see strcoll(3)). The comparison is done using unsigned characters.

       strcmp() returns an integer indicating the result of the comparison, as follows:

       • 0, if the s1 and s2 are equal;

       • a negative value if s1 is less than s2;

       • a positive value if s1 is greater than s2.

       The strncmp() function is similar, except it compares only the first (at most) n bytes of s1 and s2.
       
->The strcmp() and strncmp() functions return an integer less than, equal to, or greater than zero  if  s1
       (or the first n bytes thereof) is found, respectively, to be less than, to match, or be greater than s2.

->No protection.

#include <stddef.h>

int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	size_t			i;
	unsigned char	*str1;
	unsigned char	*str2;

	i = 0;
	str1 = (unsigned char *) s1;
	str2 = (unsigned char *) s2;
	while (i < n)
	{
		if ((str1[i] == str2[i]) && (str1[i] != '\0') && (str2[i] != '\0'))
			i++;
		else
			return (str1[i] - str2[i]);
	}
	return (0);
}

#include <string.h>
#include <stdio.h>
#include <stdlib.h>

int	main(int argc, char **argv)
{
	if (argc == 4)
		printf("real_function return :\t%d\n",
			strncmp(argv[1], argv[2], atoi(argv[3])));
	if (argc == 5)
		printf("ft_function return :\t%d\n",
			ft_strncmp(argv[1], argv[2], atoi(argv[3])));
	return (0);
}

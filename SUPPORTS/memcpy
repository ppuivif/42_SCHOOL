void	*ft_memcpy(void *dest, const void *src, size_t n

->the  memcpy() function copies n bytes from memory area src to memory area dest. The memory areas must not overlap. Use memmove(3) if the memory areas do overlap.
->the memcpy() function returns a pointer to dest.
->if (desti[i] == '\0' && srci[i] == '\0') also return (0).

#include <stddef.h>

void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	unsigned char	*desti;
	unsigned char	*srci;
	size_t			i;

	desti = (unsigned char *) dest;
	srci = (unsigned char *) src;
	i = 0;
	if (desti[i] == '\0' && srci[i] == '\0')
		return (0);
	while (i < n)
	{
		desti[i] = srci[i];
		i++;
	}
	return (desti);
}

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

int	main(int argc, char **argv)
{
	if (argc == 4)
	{
		printf("real_function :\n");
		printf("\tsize :\t\t%s\n", argv[1]);
		printf("\tsource :\t%s\n", argv[3]);
		printf("\tdestination :\t%s\n", argv[2]);
		memcpy(argv[2], argv[3], atoi(argv[1]));
		printf("\tdestination after function :\t%s\n", argv[2]);
	}
	if (argc == 5)
	{
		printf("ft_function :\n");
		printf("\tsize :\t\t%s\n", argv[1]);
		printf("\tsource :\t%s\n", argv[3]);
		printf("\tdestination :\t%s\n", argv[2]);
		ft_memcpy(argv[2], argv[3], atoi(argv[1]));
		printf("\tdestination after function :\t%s\n", argv[2]);
	}
	return (0);
}
